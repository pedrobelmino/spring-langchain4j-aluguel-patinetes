<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Exercises.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Exercises.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;public class Exercises {&#10;    // 1. Write a function that returns the sum of all elements in an integer array.&#10;    public int sumArray(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 2. Write a function that finds the value that occurs an odd number of times in an array.&#10;    public int oddOccurrences(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 3. Write a function that checks if a given string is a palindrome.&#10;    public boolean isPalindrome(String s) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 4. Write a function that returns the largest number in an integer array.&#10;    public int largestNumber(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 5. Write a function that calculates the factorial of a given integer.&#10;    public int factorial(int n) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 6. Write a function that reverses a string.&#10;    public String reverseString(String s) {&#10;        // TODO: Implement&#10;        return null;&#10;    }&#10;&#10;    // 7. Write a function that returns true if an array contains a specific value.&#10;    public boolean containsValue(int[] arr, int value) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 8. Write a function that returns the index of the first occurrence of a value in an array.&#10;    public int indexOf(int[] arr, int value) {&#10;        // TODO: Implement&#10;        return -1;&#10;    }&#10;&#10;    // 9. Write a function that removes duplicates from an array.&#10;    public int[] removeDuplicates(int[] arr) {&#10;        // TODO: Implement&#10;        return null;&#10;    }&#10;&#10;    // 10. Write a function that returns the minimum value in an array.&#10;    public int minValue(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 11. Write a function that merges two sorted arrays into one sorted array.&#10;    public int[] mergeSortedArrays(int[] arr1, int[] arr2) {&#10;        // TODO: Implement&#10;        return null;&#10;    }&#10;&#10;    // 12. Write a function that returns the length of the longest word in a string.&#10;    public int longestWordLength(String s) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 13. Write a function that counts the number of vowels in a string.&#10;    public int countVowels(String s) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 14. Write a function that checks if two strings are anagrams.&#10;    public boolean areAnagrams(String s1, String s2) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 15. Write a function that finds the second largest number in an array.&#10;    public int secondLargest(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 16. Write a function that rotates an array to the right by k steps.&#10;    public int[] rotateArray(int[] arr, int k) {&#10;        // TODO: Implement&#10;        return null;&#10;    }&#10;&#10;    // 17. Write a function that returns the sum of digits of an integer.&#10;    public int sumDigits(int n) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 18. Write a function that checks if a number is prime.&#10;    public boolean isPrime(int n) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 19. Write a function that finds the GCD of two numbers.&#10;    public int gcd(int a, int b) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 20. Write a function that finds the LCM of two numbers.&#10;    public int lcm(int a, int b) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 21. Write a function that returns the Fibonacci number at position n.&#10;    public int fibonacci(int n) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 22. Write a function that checks if a string contains only digits.&#10;    public boolean isNumeric(String s) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 23. Write a function that returns the number of words in a string.&#10;    public int countWords(String s) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 24. Write a function that finds the most frequent element in an array.&#10;    public int mostFrequent(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 25. Write a function that returns the average of an array of integers.&#10;    public double average(int[] arr) {&#10;        // TODO: Implement&#10;        return 0.0;&#10;    }&#10;&#10;    // 26. Write a function that checks if an array is sorted in ascending order.&#10;    public boolean isSorted(int[] arr) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 27. Write a function that finds the missing number in an array containing numbers from 1 to n.&#10;    public int missingNumber(int[] arr, int n) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;&#10;    // 28. Write a function that returns the first non-repeated character in a string.&#10;    public char firstNonRepeatedChar(String s) {&#10;        // TODO: Implement&#10;        return '\0';&#10;    }&#10;&#10;    // 29. Write a function that checks if a string is a valid palindrome ignoring non-alphanumeric characters.&#10;    public boolean isValidPalindrome(String s) {&#10;        // TODO: Implement&#10;        return false;&#10;    }&#10;&#10;    // 30. Write a function that returns the maximum sum of a contiguous subarray.&#10;    public int maxSubArraySum(int[] arr) {&#10;        // TODO: Implement&#10;        return 0;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import java.util.*;&#10;&#10;public class Exercises {&#10;    // 1. Write a function that returns the sum of all elements in an integer array.&#10;    public int sumArray(int[] arr) {&#10;        int sum = 0;&#10;        if (arr == null) return 0;&#10;        for (int v : arr) sum += v;&#10;        return sum;&#10;    }&#10;&#10;    // 2. Write a function that finds the value that occurs an odd number of times in an array.&#10;    public int oddOccurrences(int[] arr) {&#10;        int res = 0;&#10;        for (int v : arr) res ^= v;&#10;        return res;&#10;    }&#10;&#10;    // 3. Write a function that checks if a given string is a palindrome.&#10;    public boolean isPalindrome(String s) {&#10;        if (s == null) return false;&#10;        int i = 0, j = s.length() - 1;&#10;        while (i &lt; j) {&#10;            if (s.charAt(i++) != s.charAt(j--)) return false;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // 4. Write a function that returns the largest number in an integer array.&#10;    public int largestNumber(int[] arr) {&#10;        if (arr == null || arr.length == 0) throw new IllegalArgumentException(&quot;arr empty&quot;);&#10;        int max = arr[0];&#10;        for (int v : arr) if (v &gt; max) max = v;&#10;        return max;&#10;    }&#10;&#10;    // 5. Write a function that calculates the factorial of a given integer.&#10;    public int factorial(int n) {&#10;        if (n &lt; 0) throw new IllegalArgumentException(&quot;n must be &gt;= 0&quot;);&#10;        int r = 1;&#10;        for (int i = 2; i &lt;= n; i++) r *= i;&#10;        return r;&#10;    }&#10;&#10;    // 6. Write a function that reverses a string.&#10;    public String reverseString(String s) {&#10;        if (s == null) return null;&#10;        return new StringBuilder(s).reverse().toString();&#10;    }&#10;&#10;    // 7. Write a function that returns true if an array contains a specific value.&#10;    public boolean containsValue(int[] arr, int value) {&#10;        if (arr == null) return false;&#10;        for (int v : arr) if (v == value) return true;&#10;        return false;&#10;    }&#10;&#10;    // 8. Write a function that returns the index of the first occurrence of a value in an array.&#10;    public int indexOf(int[] arr, int value) {&#10;        if (arr == null) return -1;&#10;        for (int i = 0; i &lt; arr.length; i++) if (arr[i] == value) return i;&#10;        return -1;&#10;    }&#10;&#10;    // 9. Write a function that removes duplicates from an array.&#10;    public int[] removeDuplicates(int[] arr) {&#10;        if (arr == null) return null;&#10;        LinkedHashSet&lt;Integer&gt; set = new LinkedHashSet&lt;&gt;();&#10;        for (int v : arr) set.add(v);&#10;        int[] res = new int[set.size()];&#10;        int i = 0;&#10;        for (int v : set) res[i++] = v;&#10;        return res;&#10;    }&#10;&#10;    // 10. Write a function that returns the minimum value in an array.&#10;    public int minValue(int[] arr) {&#10;        if (arr == null || arr.length == 0) throw new IllegalArgumentException(&quot;arr empty&quot;);&#10;        int min = arr[0];&#10;        for (int v : arr) if (v &lt; min) min = v;&#10;        return min;&#10;    }&#10;&#10;    // 11. Write a function that merges two sorted arrays into one sorted array.&#10;    public int[] mergeSortedArrays(int[] arr1, int[] arr2) {&#10;        if (arr1 == null) arr1 = new int[0];&#10;        if (arr2 == null) arr2 = new int[0];&#10;        int i = 0, j = 0, k = 0;&#10;        int[] res = new int[arr1.length + arr2.length];&#10;        while (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) {&#10;            if (arr1[i] &lt;= arr2[j]) res[k++] = arr1[i++];&#10;            else res[k++] = arr2[j++];&#10;        }&#10;        while (i &lt; arr1.length) res[k++] = arr1[i++];&#10;        while (j &lt; arr2.length) res[k++] = arr2[j++];&#10;        return res;&#10;    }&#10;&#10;    // 12. Write a function that returns the length of the longest word in a string.&#10;    public int longestWordLength(String s) {&#10;        if (s == null || s.isBlank()) return 0;&#10;        String[] parts = s.split(&quot;\\s+&quot;);&#10;        int max = 0;&#10;        for (String p : parts) if (p.length() &gt; max) max = p.length();&#10;        return max;&#10;    }&#10;&#10;    // 13. Write a function that counts the number of vowels in a string.&#10;    public int countVowels(String s) {&#10;        if (s == null) return 0;&#10;        int count = 0;&#10;        for (char c : s.toLowerCase().toCharArray()) {&#10;            if (&quot;aeiou&quot;.indexOf(c) &gt;= 0) count++;&#10;        }&#10;        return count;&#10;    }&#10;&#10;    // 14. Write a function that checks if two strings are anagrams.&#10;    public boolean areAnagrams(String s1, String s2) {&#10;        if (s1 == null || s2 == null) return false;&#10;        char[] a = s1.replaceAll(&quot;\\s+&quot;, &quot;&quot;).toLowerCase().toCharArray();&#10;        char[] b = s2.replaceAll(&quot;\\s+&quot;, &quot;&quot;).toLowerCase().toCharArray();&#10;        if (a.length != b.length) return false;&#10;        Arrays.sort(a);&#10;        Arrays.sort(b);&#10;        return Arrays.equals(a, b);&#10;    }&#10;&#10;    // 15. Write a function that finds the second largest number in an array.&#10;    public int secondLargest(int[] arr) {&#10;        if (arr == null || arr.length &lt; 2) throw new IllegalArgumentException(&quot;need at least two elements&quot;);&#10;        Integer max = null, second = null;&#10;        for (int v : arr) {&#10;            if (max == null || v &gt; max) {&#10;                second = max;&#10;                max = v;&#10;            } else if ((second == null || v &gt; second) &amp;&amp; v != max) {&#10;                second = v;&#10;            }&#10;        }&#10;        return second == null ? max : second;&#10;    }&#10;&#10;    // 16. Write a function that rotates an array to the right by k steps.&#10;    public int[] rotateArray(int[] arr, int k) {&#10;        if (arr == null) return null;&#10;        int n = arr.length;&#10;        if (n == 0) return arr;&#10;        k = ((k % n) + n) % n;&#10;        int[] res = new int[n];&#10;        for (int i = 0; i &lt; n; i++) res[(i + k) % n] = arr[i];&#10;        return res;&#10;    }&#10;&#10;    // 17. Write a function that returns the sum of digits of an integer.&#10;    public int sumDigits(int n) {&#10;        n = Math.abs(n);&#10;        int sum = 0;&#10;        while (n &gt; 0) {&#10;            sum += n % 10;&#10;            n /= 10;&#10;        }&#10;        return sum;&#10;    }&#10;&#10;    // 18. Write a function that checks if a number is prime.&#10;    public boolean isPrime(int n) {&#10;        if (n &lt;= 1) return false;&#10;        if (n &lt;= 3) return true;&#10;        if (n % 2 == 0) return false;&#10;        int r = (int) Math.sqrt(n);&#10;        for (int i = 3; i &lt;= r; i += 2) if (n % i == 0) return false;&#10;        return true;&#10;    }&#10;&#10;    // 19. Write a function that finds the GCD of two numbers.&#10;    public int gcd(int a, int b) {&#10;        a = Math.abs(a); b = Math.abs(b);&#10;        while (b != 0) {&#10;            int t = a % b;&#10;            a = b;&#10;            b = t;&#10;        }&#10;        return a;&#10;    }&#10;&#10;    // 20. Write a function that finds the LCM of two numbers.&#10;    public int lcm(int a, int b) {&#10;        if (a == 0 || b == 0) return 0;&#10;        return Math.abs(a / gcd(a, b) * b);&#10;    }&#10;&#10;    // 21. Write a function that returns the Fibonacci number at position n.&#10;    public int fibonacci(int n) {&#10;        if (n &lt; 0) throw new IllegalArgumentException(&quot;n must be &gt;= 0&quot;);&#10;        if (n == 0) return 0;&#10;        if (n == 1) return 1;&#10;        int a = 0, b = 1;&#10;        for (int i = 2; i &lt;= n; i++) {&#10;            int c = a + b;&#10;            a = b;&#10;            b = c;&#10;        }&#10;        return b;&#10;    }&#10;&#10;    // 22. Write a function that checks if a string contains only digits.&#10;    public boolean isNumeric(String s) {&#10;        if (s == null || s.isEmpty()) return false;&#10;        return s.matches(&quot;\\d+&quot;);&#10;    }&#10;&#10;    // 23. Write a function that returns the number of words in a string.&#10;    public int countWords(String s) {&#10;        if (s == null || s.isBlank()) return 0;&#10;        return s.trim().split(&quot;\\s+&quot;).length;&#10;    }&#10;&#10;    // 24. Write a function that finds the most frequent element in an array.&#10;    public int mostFrequent(int[] arr) {&#10;        if (arr == null || arr.length == 0) throw new IllegalArgumentException(&quot;arr empty&quot;);&#10;        Map&lt;Integer, Integer&gt; counts = new HashMap&lt;&gt;();&#10;        for (int v : arr) counts.put(v, counts.getOrDefault(v, 0) + 1);&#10;        int best = arr[0];&#10;        int bestCount = 0;&#10;        for (Map.Entry&lt;Integer, Integer&gt; e : counts.entrySet()) {&#10;            if (e.getValue() &gt; bestCount) {&#10;                best = e.getKey();&#10;                bestCount = e.getValue();&#10;            }&#10;        }&#10;        return best;&#10;    }&#10;&#10;    // 25. Write a function that returns the average of an array of integers.&#10;    public double average(int[] arr) {&#10;        if (arr == null || arr.length == 0) return 0.0;&#10;        return (double) sumArray(arr) / arr.length;&#10;    }&#10;&#10;    // 26. Write a function that checks if an array is sorted in ascending order.&#10;    public boolean isSorted(int[] arr) {&#10;        if (arr == null || arr.length &lt;= 1) return true;&#10;        for (int i = 1; i &lt; arr.length; i++) if (arr[i] &lt; arr[i - 1]) return false;&#10;        return true;&#10;    }&#10;&#10;    // 27. Write a function that finds the missing number in an array containing numbers from 1 to n.&#10;    public int missingNumber(int[] arr, int n) {&#10;        int total = n * (n + 1) / 2;&#10;        int sum = 0;&#10;        for (int v : arr) sum += v;&#10;        return total - sum;&#10;    }&#10;&#10;    // 28. Write a function that returns the first non-repeated character in a string.&#10;    public char firstNonRepeatedChar(String s) {&#10;        if (s == null || s.isEmpty()) return '\0';&#10;        Map&lt;Character, Integer&gt; counts = new LinkedHashMap&lt;&gt;();&#10;        for (char c : s.toCharArray()) counts.put(c, counts.getOrDefault(c, 0) + 1);&#10;        for (Map.Entry&lt;Character, Integer&gt; e : counts.entrySet()) if (e.getValue() == 1) return e.getKey();&#10;        return '\0';&#10;    }&#10;&#10;    // 29. Write a function that checks if a string is a valid palindrome ignoring non-alphanumeric characters.&#10;    public boolean isValidPalindrome(String s) {&#10;        if (s == null) return false;&#10;        int i = 0, j = s.length() - 1;&#10;        while (i &lt; j) {&#10;            while (i &lt; j &amp;&amp; !Character.isLetterOrDigit(s.charAt(i))) i++;&#10;            while (i &lt; j &amp;&amp; !Character.isLetterOrDigit(s.charAt(j))) j--;&#10;            if (Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j))) return false;&#10;            i++; j--;&#10;        }&#10;        return true;&#10;    }&#10;&#10;    // 30. Write a function that returns the maximum sum of a contiguous subarray.&#10;    public int maxSubArraySum(int[] arr) {&#10;        if (arr == null || arr.length == 0) return 0;&#10;        int maxSoFar = arr[0];&#10;        int curMax = arr[0];&#10;        for (int i = 1; i &lt; arr.length; i++) {&#10;            curMax = Math.max(arr[i], curMax + arr[i]);&#10;            maxSoFar = Math.max(maxSoFar, curMax);&#10;        }&#10;        return maxSoFar;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>